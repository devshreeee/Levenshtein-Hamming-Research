# -*- coding: utf-8 -*-
"""algocodes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fcKqVFMGbZWLcGPUtrj9xJ-aO3Tnz2rL
"""

def levenshtein(str1, str2):
    m, n = len(str1), len(str2)
    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]

    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            cost = 0 if str1[i - 1] == str2[j - 1] else 1
            dp[i][j] = min(
                dp[i - 1][j] + 1,      # Deletion
                dp[i][j - 1] + 1,      # Insertion
                dp[i - 1][j - 1] + cost  # Substitution
            )
    return dp[m][n]

def hamming_distance(A, B):
    if len(A) != len(B):
        raise ValueError("Sequences must be of equal length")
    distance = 0
    for i in range(len(A)):
        if A[i] != B[i]:
            distance += 1
    return distance